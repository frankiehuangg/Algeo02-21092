
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from tkinter import filedialog as fd

import numpy as np
import cv2
import time
import os
from cv2 import VideoCapture
from PIL import Image, ImageTk
from image_processing import train_images, test_image

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame0")


# Load data from files
def load_data():
    global pict_path
    global mean_face
    global EigFace
    global Om

    pict_path = np.genfromtxt("data/pict_path.txt", dtype="str", delimiter="\n")
    mean_face = np.loadtxt("data/mean_face.txt")
    EigFace = np.loadtxt("data/EigFace.txt")
    Om = np.loadtxt("data/Om.txt")

    return pict_path, mean_face, EigFace, Om

# Check if data exists, if so; load from file
if (os.path.exists("data/pict_path.txt")):
    pict_path, mean_face, EigFace, Om = load_data()

# Return relative path to assets/
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

load_time = 0

# Iterate through directory, load images
def select_dir():
    filepath = fd.askdirectory(
        initialdir="../",
        title='Choose directory'
    )

    # If file not empty, load
    # if (len(mean_face) != 0):
    start = time.time()

    pict_path, mean_face, EigFace, Om = train_images(filepath)

    if (not os.path.exists("data/")):
        os.makedirs("data/")

    np.savetxt("data/pict_path.txt", pict_path, fmt="%s")
    np.savetxt("data/mean_face.txt", mean_face)
    np.savetxt("data/EigFace.txt", EigFace)
    np.savetxt("data/Om.txt", Om)

    load_data()

    load_time = str(round(time.time() - start, 5))

    canvas.itemconfig(exec_time, text=load_time)

is_input = True

# Change image in Test Image and Closest Result
def change_image(img, path):
    global image_image_2
    global image_image_3

    image_image_2.paste(img)
    img = Image.open(path).resize((256,256), Image.BICUBIC)
    image_image_3.paste(img)

# Select an image file
def select_file():
    # If in camera mode, don't run
    if (not is_input):
        print("Silahkan ganti mode terlebih dahulu!")
    # Else if in input mode, check if file is empty
    elif (len(mean_face) != 0):
        filetypes = ( 
            ("PNG files", "*.png"),
            ("JPG files", "*.jpg"),
            ("All files", "*.*")
        )

        filename = fd.askopenfilename(
            initialdir='../',
            title='Choose file',
            filetypes=filetypes
        )

        # If path is valid, run test_image
        if (len(filename) != 0):
            img = Image.open(filename).resize((256,256), Image.BICUBIC)

            output = test_image(img, pict_path, mean_face, EigFace, Om)
            
            change_image(img, output)
    else:
        print("Silahkan lakukan training terlebih dahulu!")

# Run camera
def run_camera():
    global image_image_2
    global canvas

    # If in input mode, don't run
    if (is_input):
        print("Silahkan ganti mode terlebih dahulu!")
    # Else if in camera mode, check if file is empty
    elif (len(mean_face) != 0):
        # if (not is_input):
        cv2image= cv2.cvtColor(cam.read()[1],cv2.COLOR_BGR2RGB)
        img = Image.fromarray(cv2image).crop((80,0,560,480))

        output = test_image(img, pict_path, mean_face, EigFace, Om)

        change_image(img, output)

        canvas.after(20, run_camera)
    else:
        print("Silahkan lakukan training terlebih dahulu!")

# Change button text
def change_mode():
    global is_input
    global image_image_2

    if is_input:
        button_3.config(text="Camera Mode")
        is_input = False
        run_camera()
    else:
        button_3.config(text="Input Mode")
        is_input = True
        img = Image.open("assets/frame0/image_2.png")
        image_image_2.paste(img)



cam = VideoCapture(0)


window = Tk()

window.title("Image Recognition")
window.geometry("960x540")
window.configure(bg = "#FFFFFF")
window.resizable(False, False)


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 540,
    width = 960,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)
canvas.pack()

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    480.0,
    270.0,
    image=image_image_1
)

button_1 = Button(
    text="Choose File",
    borderwidth=0,
    highlightthickness=0,
    command=select_file,
    relief="flat"
)
button_1.place(
    x=66.0,
    y=448.0,
    width=140.0,
    height=32.0
)

button_2 = Button(
    text="Choose Directory",
    borderwidth=0,
    highlightthickness=0,
    command=select_dir,
    relief="flat"
)
button_2.place(
    x=308.0,
    y=446.0,
    width=140.0,
    height=32.0
)

button_3 = Button(
    text="Input Mode",
    borderwidth=0,
    highlightthickness=0,
    command=change_mode,
    relief="flat"
)
button_3.place(
    x=415.0,
    y=200.0,
    width=130.0,
    height=32.0,
)

canvas.create_text(
    301.0,
    412.0,
    anchor="nw",
    text="Insert Your Dataset",
    fill="#FFFFFF",
    font=("K2D Light", 18 * -1)
)

canvas.create_text(
    52.0,
    412.0,
    anchor="nw",
    text="Insert Your Image\n",
    fill="#FFFFFF",
    font=("K2D Light", 18 * -1)
)

canvas.create_text(
    777.0,
    412.0,
    anchor="nw",
    text="Excecution Time",
    fill="#FFFFFF",
    font=("K2D Light", 18 * -1)
)

exec_time = canvas.create_text(
    777.0,
    448.0,
    anchor="nw",
    text="0",
    fill="#FFFFFF",
    font=("K2D Light", 18 * -1)
)

image_image_2 = ImageTk.PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    250.0,
    229.0,
    image=image_image_2
)

image_image_3 = ImageTk.PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    715.0,
    229.0,
    image=image_image_3
)

canvas.create_text(
    322.0,
    12.0,
    anchor="nw",
    text="FACE RECOGNITION",
    fill="#FFFFFF",
    font=("Kadwa Regular", 32 * -1)
)

canvas.create_rectangle(
    34.0,
    73.0,
    922.0,
    76.0,
    fill="#FFFFFF",
    outline="")

canvas.create_text(
    202.0,
    357.0,
    anchor="nw",
    text="Test Image",
    fill="#FFFFFF",
    font=("Kadwa Regular", 18 * -1)
)

canvas.create_text(
    655.0,
    357.0,
    anchor="nw",
    text="Closest Result",
    fill="#FFFFFF",
    font=("Kadwa Regular", 18 * -1)
)

window.mainloop()